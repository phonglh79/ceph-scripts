#!/usr/bin/python
#
# ceph-gentle-drain
# Author: Dan van der Ster <daniel.vanderster@cern.ch>
#
# Slowly drain a list of OSDs causing minimal impact in a ceph cluster.
#

import sys
import getopt
import commands
import json
import time
import subprocess


def pool_exists(pool):
    cmd = ["ceph", "osd", "pool", "stats", pool]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = proc.communicate()
    return True if proc.returncode == 0 else False


def create_pool(pool):
    cmd = ["ceph", "osd", "pool", "create", pool, "100", "100"]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = proc.communicate()
    if proc.returncode != 0:
        raise Exception(stderr)


def delete_pool(pool):
    """
    Delete a pool is dangerous, so the operation is disable by Ceph in default.
    In that case, this function is expected to fail, you need to delete the
    pool manually if you really mean it:

    $ ceph osd pool delete <pool> <pool> --yes-i-really-really-mean-it
    """
    cmd = ["ceph", "osd", "pool", "delete", pool]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = proc.communicate()
    if proc.returncode != 0:
        raise Exception(stderr)


def prepare(bench_pool):
    print("prepare draining")

    if pool_exists(bench_pool):
        print("pool %s already exists" % bench_pool)
        return

    print("create benchmark pool %s to measure latency" % bench_pool)
    create_pool(bench_pool)


def cleanup(bench_pool):
    print("cleaning up")

    if pool_exists(bench_pool):
        # delete a pool is disabled by Ceph in default
        try:
            delete_pool(bench_pool)
        except Exception as e:
            print("delete pool %s failed: %s" % (bench_pool, e))
            print("You need to manually detele the pool %s" % bench_pool)

    print("cleanup done")


def update_osd_tree():
    global osd_tree
    print "update_osd_tree: loading ceph osd tree"
    osd_tree_json = commands.getoutput(
        'ceph osd tree --format=json 2>/dev/null')
    osd_tree = json.loads(osd_tree_json)
    print "update_osd_tree: done"


def get_crush_weight(osd):
    global osd_tree
    for node in osd_tree['nodes']:
        if node['name'] == osd:
            weight = float(node['crush_weight'])
            print "get_crush_weight: %s has weight %s" % (osd, weight)
            return weight
    raise Exception('Undefined crush_weight for %s' % osd)


def measure_latency(pool):
    print "measure_latency: measuring 4kB write latency"
    latency = commands.getoutput(
        "rados -p %s bench 10 write -t 1 -b 4096 2>/dev/null | egrep -i 'average latency' | awk '{print $3}'" %
     pool)
    latency_ms = 1000*float(latency)
    print "measure_latency: current latency is %s ms" % latency_ms
    return latency_ms


def get_num_backfilling():
    cmd = "ceph health detail | grep pg | grep -v stuck | grep backfilling | wc -l"
    out = commands.getoutput(cmd)
    n = int(out)
    print "get_num_backfilling: PGs currently backfilling: %s" % n
    return n


def crush_reweight(osd, weight):
    cmd = "ceph osd crush reweight %s %s" % (osd, weight)
    print "crush_reweight: calling %s" % cmd
    out = commands.getoutput(cmd)
    print "crush_reweight: %s" % out


def drain(osds, max_pgs_backfilling, max_latency, max_delta_weight, bench_pool):

    # check if there is any work to do:
    update_osd_tree()
    total_weight = 0
    for osd in osds:
        total_weight += get_crush_weight(osd)

    if total_weight == 0:
        print "drain: no work to do, exiting"
        cleanup(bench_pool)
        sys.exit(0)

    print "drain: draining total weight %s" % total_weight

    # check num pgs backfilling
    npgs = get_num_backfilling()
    if npgs > max_pgs_backfilling:
        print "drain: npgs backfilling is too high, trying again later"
        return

    # check the latency
    latency = measure_latency(bench_pool)
    if latency > max_latency:
        print "drain: latency is too high, trying again later"
        return

    total_delta_weight = 0

    for osd in osds:
        if total_delta_weight > max_delta_weight:
            print "drain: reached max delta weight this round: %s" % total_delta_weight
            return

        weight = get_crush_weight(osd)
        if weight <= 0:
            print "drain: skipping %s with weight %s" % (osd, weight)
            continue

        new_weight = 0
        print "drain: %s new weight will be %s" % (osd, new_weight)
        crush_reweight(osd, new_weight)
        total_delta_weight += weight

    if total_delta_weight == 0:
        print "All done"
        cleanup(bench_pool)
        sys.exit(0)


def usage(code=0):
    print(
        """ceph-gentle-drain [OPTIONS]

        OPTIONS
        -o/--osds <osd>[,<osd>,...]    Comma separated OSDs to drain
        -l/--latency <N>               Max lantency ms, default 50
        -b/--backfills <N>             Max PGs backfilling, default 20
        -w/--weight <N>                Max incremental weight, default 2
        --bench-pool <POOL>            Pool used to measure latency, default 'test'

        Example:
        ceph-gentle-drain -o osd.0
        """)
    sys.exit(code)


def main(argv):
    drain_osds = []
    max_latency = 50
    max_pgs_backfilling = 20
    max_delta_weight = 2
    bench_pool = "test"

    try:
        opts, args = getopt.getopt(
            argv,
            "ho:l:b:w:",
            ["osds=", "latency=", "backfills=", "weight=", "bench-pool="])
    except getopt.GetoptError:
        usage(2)

    for opt, arg in opts:
        if opt == '-h':
            usage()
        elif opt in ("-o", "--osds"):
            drain_osds = arg.split(',')
        elif opt in ("-l", "--latency"):
            max_latency = int(arg)
        elif opt in ("-b", "--backfills"):
            max_pgs_backfilling = int(arg)
        elif opt in ("-w", "--weight"):
            max_delta_weight = float(arg)
        elif opt in ("--bench-pool"):
            bench_pool = arg
        else:
            print("unknow option: %s" % opt)

    if not drain_osds:
        usage(2)

    print('==============================================================')
    print('OSDs to drain: %s' % drain_osds)
    print('Max latency (ms): %d' % max_latency)
    print('Max PGs backfilling: %d' % max_pgs_backfilling)
    print('Max delta weight: %f' % max_delta_weight)
    print('Benchmark pool: %s' % bench_pool)
    print('==============================================================')

    prepare(bench_pool)

    while(True):
        drain(drain_osds, max_pgs_backfilling, max_latency, max_delta_weight,
              bench_pool)
        print "main: sleeping 60s"
        time.sleep(60)

if __name__ == "__main__":
    main(sys.argv[1:])
